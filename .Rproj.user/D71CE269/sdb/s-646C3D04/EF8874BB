{
    "collab_server" : "",
    "contents" : "# Tom McCutchen\n# Getting and Cleaning Data Course Project\n# The purpose of this program is to collect and clean (make tidy) a data set\n# of readings of human activity on a smart phone.\n# For additional information please see the readme file.\n\n# Download and unzip the data from the data source.\n\nlibrary(downloader)\n\nlibrary(dplyr)\n\nif (!file.exists(\"clean\")){dir.create(\"clean\")}\n    \nsetwd(\"clean\") \n\nurl <- \"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip\"\n\ndownload(url, dest=\"Data.zip\", mode=\"wb\")\n\nunzip(zipfile=\"Data.zip\",exdir=\"./data\")\n\n# Read data into data frames\n\ny_test <- read.table(\"./data/UCI HAR Dataset/test/y_test.txt\")\n\nX_test <- read.table(\"./data/UCI HAR Dataset/test/X_test.txt\")\n\nsubject_test <- read.table(\"./data/UCI HAR Dataset/test/subject_test.txt\")\n\ny_train <- read.table(\"./data/UCI HAR Dataset/train/y_train.txt\")\n\nX_train <- read.table(\"./data/UCI HAR Dataset/train/X_train.txt\")\n\nsubject_train <- read.table(\"./data/UCI HAR Dataset/train/subject_train.txt\")\n\n\n# Combine test and training data - \"stack\" test data on top of training data\n# This achieves the first requirement of the assignment\n# 1. Merges the training and the test sets to create one data set. \n\ny_combined <- rbind(y_test,y_train)\n\nX_combined <- rbind(X_test,X_train)\n\nsubject_combined <- rbind(subject_test, subject_train)\n\n# Step 2\n# Identify measurements on the mean and standard deviation in order to achieve step 2.\n# Combine these into a single data frame\n# Note that the approach below assumes that mean and standard deviation values\n# have parenthesis \"()\" following them.  We do not include other features where the\n# string \"mean\" may appear without double parenthesis.\n\n\nfeatures <- read.table(\"./data/UCI HAR Dataset/features.txt\")\nfeatures <- rename(features, index = V1, desc = V2)\nfeatures_mean <- features[grepl(\"mean()\",features$desc),]\nfeatures_std <- features[grepl(\"std()\",features$desc),]\nfeatures_stats <- rbind(features_mean,features_std) \n\n# Steps 3 and 4; \n# replace numbers in y_combined with more meaningful descriptions. \n# rename columns\n# create tidy data set\n\nfor (i in 1:nrow(y_combined)) {\n  if (y_combined[i,1] == 1)  {y_combined[i,1] <- \"WALKING\"} else\n    if (y_combined[i,1] == 2)  {y_combined[i,1] <- \"WALKING_UPSTAIRS\"} else\n      if (y_combined[i,1] == 3)  {y_combined[i,1] <- \"WALKING_DOWNSTAIRS\"} else  \n        if (y_combined[i,1] == 4)  {y_combined[i,1] <- \"SITTING\"} else    \n          if (y_combined[i,1] == 5)  {y_combined[i,1] <- \"STANDING\"} else    \n            if (y_combined[i,1] == 6)  {y_combined[i,1] <- \"LAYING\"} \n}\n\ny_combined <- rename(y_combined, label = V1)\nsubject_combined <- rename(subject_combined, subject = V1)\n\n\nX_tidy <- X_combined[features_stats$index]\n\nnames(X_tidy) <- features_stats$desc\n\nData_Tidy <- cbind(subject_combined, y_combined,X_tidy)\n\n# Step 5\n# From the data set in step 4, creates a second, independent tidy data set \n# with the average of each variable for each activity and each subject.\n\n# removing the \"label\" data as it cannot be averaged:\nData_tidy_label_removed <- subset(Data_Tidy, select = -c(label) )\n\nmean_by_subject <-  Data_tidy_label_removed %>% group_by(subject) %>% summarize_each(funs(mean))\n\n# Write data frames to CSV files\n\nwrite.csv(Data_Tidy,file=\"Data_Tidy.csv\")\nwrite.csv(mean_by_subject,file=\"mean_by_subject.csv\")\n\n",
    "created" : 1496120421243.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1730867174",
    "id" : "EF8874BB",
    "lastKnownWriteTime" : 1496131159,
    "last_content_update" : 1496133974504,
    "path" : "~/Coursera/cleanscript/run_analysis.r",
    "project_path" : "run_analysis.r",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}